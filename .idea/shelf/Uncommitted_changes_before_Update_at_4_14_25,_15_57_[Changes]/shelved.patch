Index: app/api/routes.py
IDEA additional info:
Subsystem: com.intellij.openapi.diff.impl.patch.BaseRevisionTextPatchEP
<+>from click import confirm\nfrom flask import request, redirect, url_for, render_template\nfrom app import get_db\nfrom app.api import bp\nimport hashlib\nimport re\n\n\ndef hash_password(password):\n    if not password:\n        return \"\"\n\n    sha256 = hashlib.new(\"SHA256\")\n    sha256.update(password.encode())\n    hashed_password = sha256.hexdigest()\n    return hashed_password\n\n\ndef validate_email(email):\n    if not email:\n        return False\n\n    regex = re.compile(\"^[a-zA-Z0-9._%+-]+@[a-zA-Z0-9.-]+\\.[a-zA-Z]{2,}$\")\n    return regex.match(email) is not None\n\n\n# login checks if email and password match any row in the database\n@bp.route(\"/users\", methods=[\"POST\"])\ndef login():\n    email = request.form.get(\"email\")\n    password = hash_password(request.form.get(\"password\"))\n\n    if not validate_email(email) or not password:\n        return redirect(url_for(\"login.index\", login_failed=True))\n\n    db = get_db()\n    user = db.execute(\"SELECT * FROM Users WHERE email = ?\", [email]).fetchone()\n\n    if user is None or user[\"password\"] != password:\n        return redirect(url_for(\"login.index\", login_failed=True))\n\n    return f\"Successful Login!\"\n\n\n# Signup route for new user registration\n@bp.route(\"/signup\", methods=[\"POST\"])\ndef signup():\n    newEmail = request.form.get(\"email\")\n    newPassword = request.form.get(\"password\")\n    confirmPassowrd = request.form.get(\"passwordConf\")\n    accountType = request.form.get(\"accountType\")\n\n    if not validate_email(newEmail) or not newPassword or not confirmPassowrd:\n        return redirect(url_for(\"signup.index\", signup_failed=True))\n    #match password\n    if newPassword != confirmPassowrd:\n        return redirect(url_for(\"signup.index\", password_match_failed=True))\n\n    if len(newPassword) < 8 or not any(char.isupper() for char in newPassword):\n        return redirect(url_for(\"signup.index\", password_match_failed=True))\n\n    db = get_db()\n\n    try:\n        # Check if the email already exists\n        existing_user = db.execute(\"SELECT * FROM Users WHERE email = ?\", [newEmail]).fetchone()\n        if existing_user is not None:\n            return redirect(url_for(\"signup.index\", signup_exists=True))\n\n        # Insert new user into the database\n        hashed_password = hash_password(newPassword)\n        db.execute(\"INSERT INTO Users (email, password) VALUES (?, ?)\", [newEmail, hashed_password])\n        db.commit()\n\n        # Render different templates based on accountType\n        if accountType == \"seller\":\n            return render_template(\"signup/seller.html\", email=newEmail)\n        elif accountType == \"buyer\":\n            return render_template(\"signup/buyer.html\", email=newEmail)\n        else:\n            return redirect(url_for(\"signup.index\", signup_failed=True))\n\n\n    except Exception as e:\n        print(f\"Database Error: {e}\")\n        return redirect(url_for(\"signup.index\", signup_failed=True))
Subsystem: com.intellij.openapi.diff.impl.patch.CharsetEP
<+>UTF-8
===================================================================
diff --git a/app/api/routes.py b/app/api/routes.py
--- a/app/api/routes.py	(revision 923a6e8a57ef678cb3da899e22d56bb92ffe7bce)
+++ b/app/api/routes.py	(date 1744660104876)
@@ -52,7 +52,7 @@
 
     if not validate_email(newEmail) or not newPassword or not confirmPassowrd:
         return redirect(url_for("signup.index", signup_failed=True))
-    #match password
+    # match password
     if newPassword != confirmPassowrd:
         return redirect(url_for("signup.index", password_match_failed=True))
 
@@ -83,4 +83,4 @@
 
     except Exception as e:
         print(f"Database Error: {e}")
-        return redirect(url_for("signup.index", signup_failed=True))
\ No newline at end of file
+        return redirect(url_for("signup.index", signup_failed=True))
